// Generated 08 Mar 2023 07:23 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.RO
{
    [Serializable]
    public class OrderList
     : SingularBusinessListBase<OrderList, Order>
    {
        #region " Business Methods "

        public Order GetItem(int OrderID)
        {
            foreach (Order child in this)
            {
                if (child.OrderID == OrderID)
                {
                    return child;
                }
            }
            return null;
        }

        public override string ToString()
        {
            return "Orders";
        }

        public OrderDetail GetOrderDetail(int OrderDetailId)
        {
            OrderDetail obj = null;
            foreach (Order parent in this)
            {
                obj = parent.OrderDetailList.GetItem(OrderDetailId);
                if (obj != null)
                {
                    return obj;
                }
            }
            return null;
        }

        #endregion

        #region " Data Access "

        [Serializable]
        public class Criteria
          : CriteriaBase<Criteria>
        {

            public int? UserID = null;
            public int? OrderTypeID = null;
            public int? OrderID = null;
            public Criteria()
            {
            }

        }

        public static OrderList NewOrderList()
        {
            return new OrderList();
        }

        public OrderList()
        {
            // must have parameter-less constructor
        }
        public static OrderList GetOrderList()
        {
            return DataPortal.Fetch<OrderList>(new Criteria());
        }
        public static OrderList GetOrderByOrderTypeId(int? OrderTypeId)
        {
            GetOrderList();
            return DataPortal.Fetch<OrderList>(new Criteria { OrderTypeID = OrderTypeId });

        }
        protected void Fetch(SafeDataReader sdr)
        {
            this.RaiseListChangedEvents = false;
            while (sdr.Read())
            {
                this.Add(Order.GetOrder(sdr));
            }
            this.RaiseListChangedEvents = true;

            Order parent = null;
            if (sdr.NextResult())
            {
                while (sdr.Read())
                {
                    if (parent == null || parent.OrderID != sdr.GetInt32(1))
                    {
                        parent = this.GetItem(sdr.GetInt32(1));
                    }
                    parent.OrderDetailList.RaiseListChangedEvents = false;
                    parent.OrderDetailList.Add(OrderDetail.GetOrderDetail(sdr));
                    parent.OrderDetailList.RaiseListChangedEvents = true;
                }
            }
            foreach (Order child in this)
            {
                child.CheckRules();
                foreach (OrderDetail OrderDetail in child.OrderDetailList)
                {
                    OrderDetail.CheckRules();
                }
            }
        }

        protected override void DataPortal_Fetch(Object criteria)
        {
            Criteria crit = (Criteria)criteria;
            using (SqlConnection cn = new SqlConnection(Singular.Settings.ConnectionString))
            {
                cn.Open();
                try
                {
                    using (SqlCommand cm = cn.CreateCommand())
                    {
                        cm.CommandType = CommandType.StoredProcedure;
                        cm.CommandText = "GetProcs.getROOrderList";
                        cm.Parameters.AddWithValue("@UserID", Singular.Misc.NothingDBNull(crit.UserID));
                        cm.Parameters.AddWithValue("@OrderTypeID", Singular.Misc.NothingDBNull(crit.OrderTypeID));
                        cm.Parameters.AddWithValue("@OrderID", Singular.Misc.NothingDBNull(crit.OrderID));

                        using (SafeDataReader sdr = new SafeDataReader(cm.ExecuteReader()))
                        {
                            Fetch(sdr);
                        }
                    }
                }
                finally
                {
                    cn.Close();
                }
            }
        }

        #endregion

    }

}