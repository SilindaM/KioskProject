// Generated 21 Feb 2023 11:12 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Basket
{
    [Serializable]
    public class Basket
     : SingularBusinessBase<Basket>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> BasketIDProperty = RegisterProperty<int>(c => c.BasketID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int BasketID
        {
            get { return GetProperty(BasketIDProperty); }
        }

        public static PropertyInfo<int> UserIdProperty = RegisterProperty<int>(c => c.UserId, "User", 0);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = "Id of the user who create the basket"),
        Required(ErrorMessage = "User required")]
        public int UserId
        {
            get { return GetProperty(UserIdProperty); }
            set { SetProperty(UserIdProperty, value); }
        }

        public static PropertyInfo<DateTime> DateCreatedProperty = RegisterProperty<DateTime>(c => c.DateCreated, "Date Created");
        /// <summary>
        /// Gets and sets the Date Created value
        /// </summary>
        [Display(Name = "Date Created", Description = "date the record was created"),
        Required(ErrorMessage = "Date Created required")]
        public DateTime DateCreated
        {
            get
            {
                return GetProperty(DateCreatedProperty);
            }
            set
            {
                SetProperty(DateCreatedProperty, value);
            }
        }

        public static PropertyInfo<int> IsActiveIndProperty = RegisterProperty<int>(c => c.IsActiveInd, "Is Active", 0);
        /// <summary>
        /// Gets and sets the Is Active value
        /// </summary>
        [Display(Name = "Is Active", Description = ""),
        Required(ErrorMessage = "Is Active required")]
        public int IsActiveInd
        {
            get { return GetProperty(IsActiveIndProperty); }
            set { SetProperty(IsActiveIndProperty, value); }
        }

        public static PropertyInfo<int> ModifiedByProperty = RegisterProperty<int>(c => c.ModifiedBy, "Modified By", 0);
        /// <summary>
        /// Gets the Modified By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int ModifiedBy
        {
            get { return GetProperty(ModifiedByProperty); }
        }

        public static PropertyInfo<DateTime?> DateModifiedProperty = RegisterProperty<DateTime?>(c => c.DateModified, "Date Modified");
        /// <summary>
        /// Gets and sets the Date Modified value
        /// </summary>
        [Display(Name = "Date Modified", Description = "Date the order was modified")]
        public DateTime? DateModified
        {
            get
            {
                return GetProperty(DateModifiedProperty);
            }
            set
            {
                SetProperty(DateModifiedProperty, value);
            }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<DateTime?> DeleteDateProperty = RegisterProperty<DateTime?>(c => c.DeleteDate, "Delete Date");
        /// <summary>
        /// Gets and sets the Delete Date value
        /// </summary>
        [Display(Name = "Delete Date", Description = "")]
        public DateTime? DeleteDate
        {
            get
            {
                return GetProperty(DeleteDateProperty);
            }
            set
            {
                SetProperty(DeleteDateProperty, value);
            }
        }

        public static PropertyInfo<int> DeleteByProperty = RegisterProperty<int>(c => c.DeleteBy, "Delete By", 0);
        /// <summary>
        /// Gets and sets the Delete By value
        /// </summary>
        [Display(Name = "Delete By", Description = "")]
        public int DeleteBy
        {
            get { return GetProperty(DeleteByProperty); }
            set { SetProperty(DeleteByProperty, value); }
        }

        public static PropertyInfo<int?> ProductIDProperty = RegisterProperty<int?>(c => c.ProductID, "Product", null);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = "")]
        public int? ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(BasketIDProperty);
        }

        public override string ToString()
        {
            if (this.BasketID.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Basket");
                }
                else
                {
                    return String.Format("Blank {0}", "Basket");
                }
            }
            else
            {
                return this.BasketID.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewBasket() method.
        }

        public static Basket NewBasket()
        {
            return DataPortal.CreateChild<Basket>();
        }

        public Basket()
        {
            MarkAsChild();
        }

        internal static Basket GetBasket(SafeDataReader dr)
        {
            var b = new Basket();
            b.Fetch(dr);
            return b;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(BasketIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIdProperty, sdr.GetInt32(i++));
                LoadProperty(DateCreatedProperty, sdr.GetValue(i++));
                LoadProperty(IsActiveIndProperty, sdr.GetInt32(i++));
                LoadProperty(ModifiedByProperty, sdr.GetInt32(i++));
                LoadProperty(DateModifiedProperty, sdr.GetValue(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(DeleteDateProperty, sdr.GetValue(i++));
                LoadProperty(DeleteByProperty, sdr.GetInt32(i++));
                LoadProperty(ProductIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            LoadProperty(ModifiedByProperty, Settings.CurrentUser.UserID);

            AddPrimaryKeyParam(cm, BasketIDProperty);

            cm.Parameters.AddWithValue("@UserId", GetProperty(UserIdProperty));
            cm.Parameters.AddWithValue("@DateCreated", DateCreated);
            cm.Parameters.AddWithValue("@IsActiveInd", GetProperty(IsActiveIndProperty));
            cm.Parameters.AddWithValue("@ModifiedBy", GetProperty(ModifiedByProperty));
            cm.Parameters.AddWithValue("@DateModified", Singular.Misc.NothingDBNull(DateModified));
            cm.Parameters.AddWithValue("@DeleteDate", Singular.Misc.NothingDBNull(DeleteDate));
            cm.Parameters.AddWithValue("@DeleteBy", GetProperty(DeleteByProperty));
            cm.Parameters.AddWithValue("@ProductID", Singular.Misc.NothingDBNull(GetProperty(ProductIDProperty)));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(BasketIDProperty, scm.Parameters["@BasketID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@BasketID", GetProperty(BasketIDProperty));
        }

        #endregion

    }

}