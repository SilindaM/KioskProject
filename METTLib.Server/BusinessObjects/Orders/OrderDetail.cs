// Generated 08 Mar 2023 10:58 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Orders
{
    [Serializable]
    public class OrderDetail
     : SingularBusinessBase<OrderDetail>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> OrderDetailIdProperty = RegisterProperty<int>(c => c.OrderDetailId, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderDetailId
        {
            get { return GetProperty(OrderDetailIdProperty); }
        }

        public static PropertyInfo<int?> OrderIdProperty = RegisterProperty<int?>(c => c.OrderId, "Order", null);
        /// <summary>
        /// Gets and sets the Order value
        /// </summary>
        [Display(Name = "Order", Description = ""),
        Required(ErrorMessage = "Order required")]
        public int? OrderId
        {
            get { return GetProperty(OrderIdProperty); }
            set { SetProperty(OrderIdProperty, value); }
        }

        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = ""),
        StringLength(50, ErrorMessage = "Product Name cannot be more than 50 characters")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<String> ProductImageProperty = RegisterProperty<String>(c => c.ProductImage, "Product Image", "");
        /// <summary>
        /// Gets and sets the Product Image value
        /// </summary>
        [Display(Name = "Product Image", Description = ""),
        StringLength(50, ErrorMessage = "Product Image cannot be more than 50 characters")]
        public String ProductImage
        {
            get { return GetProperty(ProductImageProperty); }
            set { SetProperty(ProductImageProperty, value); }
        }

        public static PropertyInfo<String> ProductDescriptionProperty = RegisterProperty<String>(c => c.ProductDescription, "Product Description", "");
        /// <summary>
        /// Gets and sets the Product Description value
        /// </summary>
        [Display(Name = "Product Description", Description = ""),
        StringLength(50, ErrorMessage = "Product Description cannot be more than 50 characters")]
        public String ProductDescription
        {
            get { return GetProperty(ProductDescriptionProperty); }
            set { SetProperty(ProductDescriptionProperty, value); }
        }

        public static PropertyInfo<Decimal> PriceProperty = RegisterProperty<Decimal>(c => c.Price, "Price", 0D);
        /// <summary>
        /// Gets and sets the Price value
        /// </summary>
        [Display(Name = "Price", Description = ""),
        Required(ErrorMessage = "Price required")]
        public Decimal Price
        {
            get { return GetProperty(PriceProperty); }
            set { SetProperty(PriceProperty, value); }
        }

        public static PropertyInfo<int> QuantityProperty = RegisterProperty<int>(c => c.Quantity, "Quantity", 0);
        /// <summary>
        /// Gets and sets the Quantity value
        /// </summary>
        [Display(Name = "Quantity", Description = ""),
        Required(ErrorMessage = "Quantity required")]
        public int Quantity
        {
            get { return GetProperty(QuantityProperty); }
            set { SetProperty(QuantityProperty, value); }
        }

        public static PropertyInfo<Decimal> ValueProperty = RegisterProperty<Decimal>(c => c.Value, "Value", 0D);
        /// <summary>
        /// Gets and sets the Value value
        /// </summary>
        [Display(Name = "Value", Description = ""),
        Required(ErrorMessage = "Value required")]
        public Decimal Value
        {
            get { return GetProperty(ValueProperty); }
            set { SetProperty(ValueProperty, value); }
        }

        public static PropertyInfo<DateTime> DateCreatedProperty = RegisterProperty<DateTime>(c => c.DateCreated, "Date Created");
        /// <summary>
        /// Gets and sets the Date Created value
        /// </summary>
        [Display(Name = "Date Created", Description = ""),
        Required(ErrorMessage = "Date Created required")]
        public DateTime DateCreated
        {
            get
            {
                return GetProperty(DateCreatedProperty);
            }
            set
            {
                SetProperty(DateCreatedProperty, value);
            }
        }

        public static PropertyInfo<int> CreatedByProperty = RegisterProperty<int>(c => c.CreatedBy, "Created By", 0);
        /// <summary>
        /// Gets the Created By value
        /// </summary>
        [Display(AutoGenerateField = false)]
        public int CreatedBy
        {
            get { return GetProperty(CreatedByProperty); }
        }

        public static PropertyInfo<int?> ProductIdProperty = RegisterProperty<int?>(c => c.ProductId, "Product", null);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = ""),
        Required(ErrorMessage = "Product required")]
        public int? ProductId
        {
            get { return GetProperty(ProductIdProperty); }
            set { SetProperty(ProductIdProperty, value); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderDetailIdProperty);
        }

        public override string ToString()
        {
            if (this.ProductName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order Detail");
                }
                else
                {
                    return String.Format("Blank {0}", "Order Detail");
                }
            }
            else
            {
                return this.ProductName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrderDetail() method.
        }

        public static OrderDetail NewOrderDetail()
        {
            return DataPortal.CreateChild<OrderDetail>();
        }

        public OrderDetail()
        {
            MarkAsChild();
        }

        internal static OrderDetail GetOrderDetail(SafeDataReader dr)
        {
            var o = new OrderDetail();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(OrderDetailIdProperty, sdr.GetInt32(i++));
                LoadProperty(OrderIdProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(ProductImageProperty, sdr.GetString(i++));
                LoadProperty(ProductDescriptionProperty, sdr.GetString(i++));
                LoadProperty(PriceProperty, sdr.GetDecimal(i++));
                LoadProperty(QuantityProperty, sdr.GetInt32(i++));
                LoadProperty(ValueProperty, sdr.GetDecimal(i++));
                LoadProperty(DateCreatedProperty, sdr.GetValue(i++));
                LoadProperty(CreatedByProperty, sdr.GetInt32(i++));
                LoadProperty(ProductIdProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            if (this.IsNew)
            {
                LoadProperty(CreatedByProperty, Settings.CurrentUser.UserID);
            }

            AddPrimaryKeyParam(cm, OrderDetailIdProperty);

            cm.Parameters.AddWithValue("@OrderId", GetProperty(OrderIdProperty));
            cm.Parameters.AddWithValue("@ProductName", GetProperty(ProductNameProperty));
            cm.Parameters.AddWithValue("@ProductImage", GetProperty(ProductImageProperty));
            cm.Parameters.AddWithValue("@ProductDescription", GetProperty(ProductDescriptionProperty));
            cm.Parameters.AddWithValue("@Price", GetProperty(PriceProperty));
            cm.Parameters.AddWithValue("@Quantity", GetProperty(QuantityProperty));
            cm.Parameters.AddWithValue("@Value", GetProperty(ValueProperty));
            cm.Parameters.AddWithValue("@DateCreated", DateCreated);
            cm.Parameters.AddWithValue("@CreatedBy", GetProperty(CreatedByProperty));
            cm.Parameters.AddWithValue("@ProductId", GetProperty(ProductIdProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderDetailIdProperty, scm.Parameters["@OrderDetailId"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderDetailId", GetProperty(OrderDetailIdProperty));
        }

        #endregion

    }

}