// Generated 04 Mar 2023 16:52 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Orders
{
    [Serializable]
    public class Order
     : SingularBusinessBase<Order>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> OrderIDProperty = RegisterProperty<int>(c => c.OrderID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int OrderID
        {
            get { return GetProperty(OrderIDProperty); }
        }

        public static PropertyInfo<int> UserIDProperty = RegisterProperty<int>(c => c.UserID, "User", 0);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = ""),
        Required(ErrorMessage = "User required")]
        public int UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }

        public static PropertyInfo<DateTime> OrderedDateProperty = RegisterProperty<DateTime>(c => c.OrderedDate, "Ordered Date");
        /// <summary>
        /// Gets and sets the Ordered Date value
        /// </summary>
        [Display(Name = "Ordered Date", Description = ""),
        Required(ErrorMessage = "Ordered Date required")]
        public DateTime OrderedDate
        {
            get
            {
                return GetProperty(OrderedDateProperty);
            }
            set
            {
                SetProperty(OrderedDateProperty, value);
            }
        }

        public static PropertyInfo<Decimal> OrderAmountProperty = RegisterProperty<Decimal>(c => c.OrderAmount, "Order Amount", 0D);
        /// <summary>
        /// Gets and sets the Order Amount value
        /// </summary>
        [Display(Name = "Order Amount", Description = ""),
        Required(ErrorMessage = "Order Amount required")]
        public Decimal OrderAmount
        {
            get { return GetProperty(OrderAmountProperty); }
            set { SetProperty(OrderAmountProperty, value); }
        }

        public static PropertyInfo<int> CartIDProperty = RegisterProperty<int>(c => c.CartID, "Cart", 0);
        /// <summary>
        /// Gets and sets the Cart value
        /// </summary>
        [Display(Name = "Cart", Description = ""),
        Required(ErrorMessage = "Cart required")]
        public int CartID
        {
            get { return GetProperty(CartIDProperty); }
            set { SetProperty(CartIDProperty, value); }
        }

        public static PropertyInfo<int> CompletedByProperty = RegisterProperty<int>(c => c.CompletedBy, "Completed By", 0);
        /// <summary>
        /// Gets and sets the Completed By value
        /// </summary>
        [Display(Name = "Completed By", Description = ""),
        Required(ErrorMessage = "Completed By required")]
        public int CompletedBy
        {
            get { return GetProperty(CompletedByProperty); }
            set { SetProperty(CompletedByProperty, value); }
        }

        public static PropertyInfo<int?> OrderTypeIdProperty = RegisterProperty<int?>(c => c.OrderTypeId, "Order Type", null);
        /// <summary>
        /// Gets and sets the Order Type value
        /// </summary>
        [Display(Name = "Order Type", Description = "")]
        public int? OrderTypeId
        {
            get { return GetProperty(OrderTypeIdProperty); }
            set { SetProperty(OrderTypeIdProperty, value); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(OrderIDProperty);
        }

        public override string ToString()
        {
            if (this.OrderID.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Order");
                }
                else
                {
                    return String.Format("Blank {0}", "Order");
                }
            }
            else
            {
                return this.OrderID.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewOrder() method.
        }

        public static Order NewOrder()
        {
            return DataPortal.CreateChild<Order>();
        }

        public Order()
        {
            MarkAsChild();
        }

        internal static Order GetOrder(SafeDataReader dr)
        {
            var o = new Order();
            o.Fetch(dr);
            return o;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(OrderIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIDProperty, sdr.GetInt32(i++));
                LoadProperty(OrderedDateProperty, sdr.GetValue(i++));
                LoadProperty(OrderAmountProperty, sdr.GetDecimal(i++));
                LoadProperty(CartIDProperty, sdr.GetInt32(i++));
                LoadProperty(CompletedByProperty, sdr.GetInt32(i++));
                LoadProperty(OrderTypeIdProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, OrderIDProperty);

            cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
            cm.Parameters.AddWithValue("@OrderedDate", OrderedDate);
            cm.Parameters.AddWithValue("@OrderAmount", GetProperty(OrderAmountProperty));
            cm.Parameters.AddWithValue("@CartID", GetProperty(CartIDProperty));
            cm.Parameters.AddWithValue("@CompletedBy", GetProperty(CompletedByProperty));
            cm.Parameters.AddWithValue("@OrderTypeId", Singular.Misc.NothingDBNull(GetProperty(OrderTypeIdProperty)));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(OrderIDProperty, scm.Parameters["@OrderID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            UpdateChild(GetProperty(OrderDetailProperty))
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@OrderID", GetProperty(OrderIDProperty));
        }

        #endregion

    }

}